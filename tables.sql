-- MySQL Script generated by MySQL Workbench
-- Sun Apr 22 11:18:22 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering
use mydb;
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';


drop table if exists Employee;
create table if not exists Employee (
	EmployeeID int not null auto_increment,
	FirstName varchar(100),
	LastName varchar(100),
	EmailAddress varchar(100),
	Emp_Password varchar(255),
	DirectSupervisorID int,
	DepartmentID int,
	EmployeeTypeID int,
	LastLogin timestamp,
	constraint PK_Employee primary key (EmployeeID)
);

drop table if exists Department;
create table if not exists Department (
	DepartmentID int not null auto_increment,
	DepartmentHeadID int not null,
	DepartmentName varchar(100),
	constraint PK_Department primary key (DepartmentID)
);

drop table if exists EmployeeType;
create table if not exists EmployeeType (
	EmployeeTypeID int not null auto_increment,
	EmployeeType varchar(50),
	constraint PK_EmployeeType primary key (EmployeeTypeID)
);


drop table if exists Event;
create table if not exists Event (
	EventID int not null auto_increment,
	EventName varchar(100),
	EventStartTime timestamp,
	Cost int,
	LocationID int not null,
	EventTypeID int not null,
	GradingFormatID int not null,
	constraint PK_Event primary key (EventID)
);

drop table if exists EventType;
create table if not exists EventType (
	EventTypeID int not null auto_increment,
	EventType varchar(50),
	ReimbursementCoveragePercent int,
	constraint PK_EventType primary key (EventTypeID)
);

drop table if exists Location;
create table if not exists Location (
	LocationID int not null auto_increment,
	StreetAddress1 varchar(100),
	StreetAddress2 varchar(100),
	City varchar(50),
	State varchar(50),
	ZipCode varchar(20),
	Country varchar(50),
	constraint PK_Location primary key (LocationID)
);

drop table if exists GradingFormat;
create table if not exists GradingFormat (
	GradingFormatID int not null auto_increment,
	GradingFormat varchar(50),
	constraint PK_GradingFormat primary key (GradingFormatID)
);

drop table if exists Attachment;
create table if not exists Attachment (
	AttachmentID int not null auto_increment,
	AttachmentLocation varchar(200),
	ReimbursementID int not null,
	AttachmentDescription varchar(200),
	constraint PK_Attachment primary key (AttachmentID)
);

drop table if exists ReimbursementStatus;
create table if not exists ReimbursementStatus (
	ReimbursementStatusID int not null auto_increment,
	ReimbursementStatus varchar(50),
	constraint PK_ReimbursementStatus primary key (ReimbursementStatusID)
);
drop table if exists InformationRequest;
create table if not exists InformationRequest (
	InformationRequestID int not null auto_increment,
	RequesterID int not null,
	RequesteeID int not null,
	ReimbursementID int not null,
	RequesterMessage varchar(255),
	RequesteeResponse varchar(255),
	RequestDate datetime default NOW(),
    ResponseDate datetime default null, 
	constraint PK_InformationRequest primary key (InformationRequestID)
);
drop table if exists Reimbursement;
create table Reimbursement (
	ReimbursementID int not null auto_increment,
	RequesterId int not null,
	AssignTo int not null,
	Description varchar(255),
	WorkRelatedJustification varchar(255),
	ReimbursementAmountRequested int,
	AdditionalInformation varchar(255),
	ReimbursementStatusID int,
	DateSubmitted datetime default NOW(),
	DateCompleted datetime default null,
	EventID int,
	ReimbursementResponseID int,
	constraint PK_Reimbursement primary key (ReimbursementID)
);
drop table if exists ReimbursementResponse;
create table if not exists ReimbursementResponse (
	ReimbursementResponseID int not null auto_increment,
	ResponderID int not null,
	ReimbursementAmountAwarded int,
	ReimbursementAmountExceeded int,
	ReimbursementExceedReason varchar(255),
	DisapprovalReason varchar(255),
	constraint PK_ReimbursementResponse primary key (ReimbursementResponseID)
);




alter table Employee add constraint FK_Employee_DirectSupervisor foreign key (DirectSupervisorID) references Employee(EmployeeID);
alter table Employee add constraint FK_Employee_Department foreign key (DepartmentID) references Department(DepartmentID);
alter table Employee add constraint FK_Employee_EmployeeType foreign key (EmployeeTypeID) references EmployeeType(EmployeeTypeID);
alter table Department add constraint FK_Department_DepartmentHead foreign key (DepartmentHeadID) references Employee(EmployeeID);
alter table Event add constraint FK_Event_Location foreign key (LocationID) references Location(LocationID);
alter table Event add constraint FK_Event_EventType foreign key (EventTypeID) references EventType(EventTypeID);
alter table Event add constraint FK_Event_GradingFormat foreign key (GradingFormatID) references GradingFormat(GradingFormatID);
alter table Attachment add constraint FK_Attachment_Reimbursement foreign key (ReimbursementID) references Reimbursement(ReimbursementID);
alter table InformationRequest add constraint FK_InfoRequest_Requester foreign key (RequesterID) references Employee(EmployeeID);
alter table InformationRequest add constraint FK_InfoRequest_Requestee foreign key (RequesteeID) references Employee(EmployeeID);
alter table InformationRequest add constraint FK_InfoRequest_Reimbursement foreign key (ReimbursementID) references Reimbursement(ReimbursementID);
alter table Reimbursement add constraint FK_Reimbursement_RequesterID foreign key (RequesterID) references Employee(EmployeeID);
alter table Reimbursement add constraint FK_Reimbursement_Status foreign key (ReimbursementStatusID) references ReimbursementStatus(ReimbursementStatusID);
alter table Reimbursement add constraint FK_Reimbursement_Response foreign key (ReimbursementResponseID) references ReimbursementResponse(ReimbursementResponseID);
alter table ReimbursementResponse add constraint FK_ReimResponse_Responder foreign key (ResponderID) references Employee(EmployeeID);
